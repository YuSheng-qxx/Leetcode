class Solution {
public:
    int nextp[4][2] = {{1,0}, {-1, 0}, {0,1}, {0,-1}};
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> q;
        //找到所有已经坏掉的橘子
        int row = grid.size();
        if(row == 0){
            return 0;
        }
        int col = grid[0].size();
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j] == 2){
                    q.push(make_pair(i, j));
                }
            }
        }
        int minTime = 0;
        while(!q.empty()){
            //取出所有已经坏掉的橘子
            int sz = q.size();
            int flag = 0;
            while(sz--){
                pair<int, int> cur = q.front();
                q.pop();
                for(int i=0; i<4; i++){
                    int nx = cur.first + nextp[i][0];
                    int ny = cur.second + nextp[i][1];
                    if(nx < 0 || nx >= row || ny < 0 || ny >=col){
                        continue;
                    }
                    if(grid[nx][ny] == 1){
                        flag=1;
                        grid[nx][ny] = 2;
                        q.push(make_pair(nx, ny));
                    }
                }
            }
            if(flag){
                ++minTime;
            }
        }

        //判断有没有新鲜橘子
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return minTime;
    }
};
