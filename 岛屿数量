class Solution {
public:
    int nextp[4][2] = {{-1,0}, {1, 0}, {0,-1}, {0,1}};
    void DFS(vector<vector<char>>& grid, int row, int col, vector<vector<bool>>& visited, int x, int y){
        visited[x][y] = true;
        //搜索
        for(int i=0; i<4; i++){
            int nx = x+nextp[i][0];
            int ny = y+nextp[i][1];
            if(nx<0 || nx>=row || ny<0 || ny>=col){
                continue;
            }
            if(grid[nx][ny] == '1' && !visited[nx][ny]){
                DFS(grid, row, col, visited, nx, ny);
            }
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int step = 0;
        int row = grid.size();
        if(row == 0){
            return 0;
        }
        int col = grid[0].size();
        vector<vector<bool>> visited(row, vector<bool>(col, false));
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                //为陆地且没有访问过
                if(grid[i][j]=='1' && !visited[i][j]){
                    ++step;
                    DFS(grid, row, col, visited, i, j);
                }
            }
        }
        return step;
    }
};
