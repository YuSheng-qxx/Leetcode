class Solution {
public:
    int nextp[4][2] = {{-1,0}, {1, 0}, {0,-1}, {0,1}};
    void DFS(vector<vector<char>>& board, int row, int col, int x, int y){
        //1.标记
        board[x][y] = 'a';
        //2.搜索
        for(int i=0; i<4; i++){
            int nx = x + nextp[i][0];
            int ny = y + nextp[i][1];
            //判断
            if(nx < 0 ||nx >= row || ny < 0 ||ny >= col){
                continue;
            }
            if(board[nx][ny] == 'O'){
                DFS(board, row, col, nx, ny);
            }
        }
    }
    void solve(vector<vector<char>>& board) {
        int row = board.size();
        if(row == 0){
            return ;
        }
        int col = board[0].size();
        //搜索到所有边上的o
        //以每个边上的o为起点，找到和边上o连通的所有o
        for(int i=0; i<col; i++){
            //第一行
            if(board[0][i] == 'O'){
                DFS(board, row, col, 0, i);
            }
            //最后一行
            if(board[row-1][i] == 'O'){
                DFS(board, row, col, row-1, i);
            }
        }
        for(int i=1; i<row-1; i++){
            if(board[i][0] == 'O'){
                DFS(board, row, col, i, 0);
            }
            if(board[i][col-1] == 'O'){
                DFS(board, row, col, i, col-1);
            }
        }

        //替换，恢复
        for(int i=0; i<row; i++){
            for(int j=0; j<col; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                else if(board[i][j] == 'a')
                {
                    board[i][j] = 'O';
                }
            }
        }
    }
};
