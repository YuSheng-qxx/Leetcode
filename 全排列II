class Solution {
public:
    void DFS(vector<int>& nums, set<vector<int>>& mat, vector<int>& tmp, vector<int>& visited, int idx){
        if(tmp.size() == nums.size()){
            mat.insert(tmp);
            return ;
        }
        for(int i=0; i<nums.size(); i++)
        {
            if(visited[i] == 1){
                continue;
            }
            tmp.push_back(nums[i]);
            visited[i] = 1;
            DFS(nums, mat, tmp, visited, i+1);
            tmp.pop_back();
            visited[i] = 0;
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        set<vector<int>> mat;
        vector<int> tmp;
        vector<int> visited(nums.size(), 0);
        DFS(nums, mat, tmp, visited, 0);
        return vector<vector<int>>(mat.begin(), mat.end());
    }
};
