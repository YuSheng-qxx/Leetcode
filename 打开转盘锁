class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_set<string> dead(deadends.begin(), deadends.end());
        if(dead.find("0000") != dead.end()){
            return -1;
        }
        queue<string> q;
        unordered_set<string> visited;
        q.push("0000");
        visited.insert("0000");
        int step = 0;
        while(!q.empty()){
            int num = q.size();
            while(num--){
                string cur = q.front();
                q.pop();
                if(cur == target){
                    return step;
                }
                //修改密码
                for(int i=0; i<cur.size(); i++){
                    string tmp1 = cur;
                    string tmp2 = cur;
                    tmp1[i] = tmp1[i]=='0' ? '9' : tmp1[i]-1;
                    tmp2[i] = tmp2[i]=='9' ? '0' : tmp2[i]+1;
                    //判断是否在死亡数组中
                    if(dead.find(tmp1) == dead.end() && visited.find(tmp1) == visited.end()){
                        q.push(tmp1);
                        dead.insert(tmp1);
                    }
                    if(dead.find(tmp2) == dead.end() && visited.find(tmp2) == visited.end()){
                        q.push(tmp2);
                        dead.insert(tmp2);
                    }
                }
            }
            ++step;
        }
        return -1;
    }
};
