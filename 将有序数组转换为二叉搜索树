/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 
class Solution {
public:
    TreeNode* DFS(vector<int>& nums, int left, int right){
        if(left > right){
            return NULL;
        }
        int mid = left + (right - 1) / 2;
        TreeNode* root = new TreeNode(nums[mid]);
        root->left = DFS(nums, left, mid-1);
        root->right = DFS(nums, mid+1, right);
        return root;
    }
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return DFS(nums, 0, nums.size()-1);
    }
};*/
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return help(nums, 0, nums.size() - 1);
    }
    TreeNode* help(vector<int>& nums, int l, int r) {
        if (r < l) return nullptr;
        int mid = l + ((r - l) >> 1);

        TreeNode* root = new TreeNode(nums[mid]);
        root->left = help(nums, l, mid - 1);
        root->right = help(nums, mid + 1, r);
        return root;
    }
};
