int nextp[4][2] = {{-1, 0}, {1, 0}, {0,-1}, {0,1}};

class Solution {
public:
    void DFS(vector<vector<int>>& image, int row, int col, vector<vector<int>>& visited, int newx, int newy, int oldC, int newC)
    {
        //1.染色
        image[newx][newy] = newC;
        visited[newx][newy] = 1;
        //2.搜索：上下左右
        for(int i=0; i<4; i++){
            int nextx = newx + nextp[i][0];
            int nexty = newy + nextp[i][1];

            //3.判断位置
            if(nextx < 0 || nextx >= row || nexty < 0 || nexty >= col){
                continue;
            }
            //颜色符合要求且没有被访问过
            if(image[nextx][nexty] == oldC && visited[nextx][nexty] == 0){
                DFS(image, row, col, visited, nextx, nexty, oldC, newC);
            }
        }
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        int row = image.size();
        int col = image[0].size();
        vector<vector<int>> visited(row, vector<int>(col, 0));
        int oldC = image[sr][sc];
        DFS(image, row, col, visited, sr, sc, oldC, newColor);
        return  image;
    }
};
